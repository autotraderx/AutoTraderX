import logging
import asyncio
import gspread
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from oauth2client.service_account import ServiceAccountCredentials
from aiogram.fsm.storage.memory import MemoryStorage


# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "7683024748:AAFMr0LajbNAvuwP0P4M7Saa8zuF5J6_AyQ"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets API
SHEET_NAME = "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
CREDENTIALS_FILE = "credentials.json"

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open(SHEET_NAME).sheet1

# ID –≥—Ä—É–ø–ø –¥–ª—è –∑–∞—è–≤–æ–∫
admin_group_deposit = -1002466018405
admin_group_withdraw = -1002374951392
admin_group_support = -1002471642873

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∞ Recharger le d√©p√¥t"), KeyboardButton(text="üì§ Retirer des fonds")],
        [KeyboardButton(text="üí≥ Solde"), KeyboardButton(text="üìû Contactez l'administrateur")]
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)


payment_methods_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="Revolut"), KeyboardButton(text="Wise")],
        [KeyboardButton(text="Virement bancaire"), KeyboardButton(text="Skrill")],
        [KeyboardButton(text="Paypal")]
    ],
    resize_keyboard=True
)

# –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class DepositState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_payment_method = State()

class WithdrawState(StatesGroup):
    waiting_for_amount = State()
    waiting_for_payment_method = State()

class SupportState(StatesGroup):
    waiting_for_reason = State()

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()
dp.include_router(router)


@router.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("üëã Bonjour ! Choisissez une action :", reply_markup=main_kb)

# –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@router.message(F.text == "üìû Contactez l'administrateur")
async def contact_admin(message: types.Message, state: FSMContext):
    await message.answer("‚úèÔ∏è Veuillez d√©crire votre probl√®me et inclure votre @username.")
    await state.set_state(SupportState.waiting_for_reason)

@router.message(SupportState.waiting_for_reason)
async def send_admin_request(message: types.Message, state: FSMContext):
    if not message.from_user.username:
        await message.answer("‚ùå Vous devez avoir un @username pour contacter l'administrateur.")
        return
    
    support_message = (
        f"üì© Nouvelle demande de support üì©\n"
        f"üë§ Utilisateur : @{message.from_user.username} (ID: {message.from_user.id})\n"
        f"üìù Raison : {message.text}"
    )
    
    await bot.send_message(admin_group_support, support_message)
    await message.answer("‚úÖ Votre demande a √©t√© envoy√©e √† l'administrateur.")
    await state.clear()

# –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–ø–æ–∑–∏—Ç–∞
@router.message(F.text == "üí∞ Recharger le d√©p√¥t")
async def deposit_request(message: types.Message, state: FSMContext):
    await message.answer("üíµ Veuillez entrer le montant (minimum 10 EUR, sans centimes) :")
    await state.set_state(DepositState.waiting_for_amount)

@router.message(DepositState.waiting_for_amount)
async def choose_deposit_payment_method(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 10:
        await message.answer("‚ùå Veuillez entrer un montant valide (minimum 10 EUR, sans centimes)")
        return
    
    await state.update_data(amount=message.text)
    await message.answer("üí≥ Choisissez un mode de paiement :", reply_markup=payment_methods_kb)
    await state.set_state(DepositState.waiting_for_payment_method)

@router.message(DepositState.waiting_for_payment_method)
async def confirm_deposit(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    deposit_request_text = (
        f"üîî Nouvelle demande de d√©p√¥t üîî\n"
        f"üë§ Utilisateur : @{message.from_user.username} (ID: {message.from_user.id})\n"
        f"üí∞ Montant : {user_data['amount']} EUR\n"
        f"üí≥ M√©thode de paiement : {message.text}\n"
        "\nüìå R√®gles de paiement :\n"
        "1Ô∏è‚É£ Apr√®s r√©ception des coordonn√©es, vous avez 15 minutes pour effectuer le paiement.\n"
        "2Ô∏è‚É£ Apr√®s paiement, envoyez une capture d'√©cran ou un fichier PDF de confirmation.\n"
        "3Ô∏è‚É£ Envoyez exactement le montant indiqu√©. En cas de modification, remplissez une nouvelle demande."
    )
    
    await bot.send_message(admin_group_deposit, deposit_request_text)
    await message.answer("‚úÖ Votre demande a √©t√© accept√©e. Un administrateur vous contactera bient√¥t.")
    await state.clear()


# –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
@router.message(F.text == "üì§ Retirer des fonds")
async def withdraw_request(message: types.Message, state: FSMContext):
    await message.answer("üíµ Veuillez entrer le montant que vous souhaitez retirer (minimum 10 EUR) :")
    await state.set_state(WithdrawState.waiting_for_amount)

@router.message(WithdrawState.waiting_for_amount)
async def choose_withdraw_payment_method(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) < 10:
        await message.answer("‚ùå Veuillez entrer un montant valide (minimum 10 EUR, sans centimes)")
        return
    
    await state.update_data(amount=message.text)
    await message.answer("üí≥ Choisissez un mode de paiement :", reply_markup=payment_methods_kb)
    await state.set_state(WithdrawState.waiting_for_payment_method)

@router.message(WithdrawState.waiting_for_payment_method)
async def confirm_withdraw(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    withdraw_request_text = (
        f"üîî Nouvelle demande de retrait üîî\n"
        f"üë§ Utilisateur : @{message.from_user.username} (ID: {message.from_user.id})\n"
        f"üí∞ Montant : {user_data['amount']} EUR\n"
        f"üí≥ M√©thode de paiement : {message.text}\n"
        "\nüìå R√®gles de retrait :\n"
        "1Ô∏è‚É£ Restez disponible pendant 30 minutes apr√®s la demande.\n"
        "2Ô∏è‚É£ Apr√®s r√©ception du paiement, envoyez une capture d'√©cran de confirmation.\n"
        "3Ô∏è‚É£ Vous √™tes responsable des coordonn√©es fournies."
    )
    
    await bot.send_message(admin_group_withdraw, withdraw_request_text)
    await message.answer("‚úÖ Votre demande a √©t√© accept√©e. Un administrateur vous contactera bient√¥t.")
    await state.clear()

# –ë–∞–ª–∞–Ω—Å
@router.message(F.text == "üí≥ Solde")
async def check_balance(message: types.Message):
    user_id = str(message.from_user.id)
    try:
        full_table = sheet.get_all_values()
        headers = full_table[0]
        records = [dict(zip(headers, row)) for row in full_table[1:] if any(row)]
        user_data = next((row for row in records if str(row.get('ID', '')).strip() == user_id), None)
        if user_data:
            balance_message = (
                f"üí≥ Votre solde : {user_data.get('–ë–∞–ª–∞–Ω—Å', 'N/A')} EUR\n"
                f"üìÖ Date du dernier d√©p√¥t : {user_data.get('–î–∞—Ç–∞ –ø–æ–ø–ª–Ω–µ–Ω–∏—è', 'N/A')}\n"
                f"‚è≥ Retrait disponible √† partir du : {user_data.get('–í—ã–≤–æ–¥ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω', 'N/A')}"
            )
            await message.answer(balance_message)
        else:
            await message.answer("‚ùå Vous n'avez pas encore de solde enregistr√©.")
    except Exception as e:
        logging.error(f"üö® Erreur lors de la r√©cup√©ration du solde: {e}")
        await message.answer("‚ö† Une erreur s'est produite lors de la r√©cup√©ration de votre solde.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())

